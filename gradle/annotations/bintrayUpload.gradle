apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

// Bintray
def bintrayUser = ''
def bintrayApiKey = ''
def bintrayPassword = ''
if (project.rootProject.file('local.properties').exists()) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    bintrayUser = properties.getProperty("bintray.user")
    bintrayApiKey = properties.getProperty("bintray.apikey")
    bintrayPassword = properties.getProperty("bintray.gpg.password")
} else {
    bintrayUser = defaultBintrayUser
    bintrayApiKey = defaultBintrayApiKey
    bintrayPassword = defaultBintrayPassword
}

bintray {
    user = bintrayUser
    key = bintrayApiKey
    publications = ['MyPublication']
    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = annotationsArtifact
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = bintrayPassword
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}

version = libraryVersion

apply from: 'https://raw.githubusercontent.com/kostasdrakonakis/maven-upload/master/pomconfig.gradle'

// Get the artifacts
artifacts {
    archives javadocJar
    archives sourcesJar
}

// Create the publication with the pom configuration:
publishing {
    publications {
        Annotations(MavenPublication) {
            artifact sourcesJar
            artifact javadocJar
            groupId publishedGroupId
            artifactId annotationsArtifact
            version libraryVersion
            from components.java
            pom.withXml {
                def root = asNode()
                NodeList packagingNodeList = root.get('packaging')
                if (!packagingNodeList.isEmpty()) {
                    def packagingNode = packagingNodeList.get(0)
                    packagingNode.setValue(packagingType)
                } else {
                    root.appendNode('packaging', packagingType)
                }
                root.appendNode('description', libraryDescription)
                root.appendNode('name', libraryName)
                root.appendNode('url', siteUrl)
                root.children().last() + pomConfiguration
            }
        }
    }
}
